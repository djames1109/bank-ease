plugins {
    id 'org.springframework.boot' version '3.4.1' apply(false)
    id 'io.spring.dependency-management' version '1.1.7' apply(false)
    id 'org.sonarqube' version '6.0.1.5171'
    id 'jacoco'
    id 'jacoco-report-aggregation'
    id 'org.castle.djames.bankease.arch-rules-enforcer' version '1.0.0-SNAPSHOT' apply(false)
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.12"
    }

    tasks.withType(Test).configureEach {
        finalizedBy jacocoTestReport
    }
}

// JaCoCo Aggregation (Root-Level Task)
def projectsToInclude = subprojects.findAll { project -> project.path != ':components:arch-rules' }

tasks.register('jacocoRootReport', JacocoReport) {
    dependsOn projectsToInclude*.test

    additionalSourceDirs.setFrom(files(projectsToInclude.collect { it.sourceSets.main.allSource.srcDirs }))
    sourceDirectories.setFrom(files(projectsToInclude.collect { it.sourceSets.main.allSource.srcDirs }))
    classDirectories.setFrom(files(projectsToInclude.collect {
        it.sourceSets.main.output.asFileTree.matching {
            exclude '**/generated/**' // Exclude generated code if needed
        }
    }))

    // Fix: Collect execution data files properly
    def execDataFiles = files(projectsToInclude.collectMany { project ->
        project.tasks.withType(Test).collect { task ->
            task.extensions.findByType(JacocoTaskExtension)?.destinationFile
        }
    }.findAll { it?.exists() }) // Ensure only existing files are included

    executionData.setFrom(execDataFiles)

    reports {
        xml.required = true
        xml.outputLocation = layout.buildDirectory.file("reports/jacoco/jacocoRootReport.xml")
        html.required = true
    }
}


// SonarQube Configuration
sonarqube {
    properties {
        property "sonar.projectKey", "$sonarProjectKey"
        property "sonar.organization", "$sonarProjectName"
        property "sonar.host.url", "$sonarHostUrl"
        property "sonar.login", "$sonarLogin"

        // Use the aggregated JaCoCo report
        property "sonar.coverage.jacoco.xmlReportPaths", layout.buildDirectory.file("reports/jacoco/jacocoRootReport.xml").get().asFile
    }
}
